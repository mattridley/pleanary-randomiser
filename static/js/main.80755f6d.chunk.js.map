{"version":3,"sources":["components/Button.tsx","components/Cell.styles.ts","components/Cell.tsx","components/Root.styles.ts","components/Root.tsx","components/Table.tsx","App.tsx","hooks/useRandomiser.ts","index.tsx"],"names":["Button","Object","styled_base_browser_esm","target","name","styles","root","_ref","isSelected","cellIdx","css_browser_esm","randomColor","seed","luminosity","content","Cell","children","props","objectWithoutProperties","core_browser_esm","css","s","data-testid","globals","Root","Table","App","_useRandomiser","cells","_useState","useState","_useState2","slicedToArray","selectedCell","setSelected","_useState3","_useState4","isSpinning","setIsSpinning","interval","useRef","timer","selectRandomCell","useCallback","cellCount","reduce","count","row","length","selected","newSelected","Math","floor","random","stopSpinning","current","clearInterval","undefined","spin","window","setTimeout","setInterval","useRandomiser","react_default","a","createElement","components_Root","components_Table","map","rowIdx","key","text","colIdx","cols","components_Cell","components_Button","onClick","disabled","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.80755f6d.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 75px;\n  width: 150px;\n  margin: 20px;\n\n  background-color: #1e90ff;\n  outline: none;\n\n  color: #ffffff;\n  font-size: xx-large;\n\n  &:not(:disabled):hover {\n    background-color: #1c7fe5;\n    cursor: pointer;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nexport default Button;\n","import css from '@emotion/css/macro';\nimport randomColor from 'randomcolor';\n\nexport const root = ({ isSelected, cellIdx }: { isSelected: boolean, cellIdx: number }) => css`\n    width: 25%;\n    padding-bottom: 25%;\n    height: 0;\n    position: relative;\n    max-width: 160px;\n    max-height: 160px;\n    border: 1px solid #333;\n    text-align: center;\n    background-color: ${isSelected && randomColor({ seed: cellIdx, luminosity: 'bright' })};\n    color: ${isSelected && 'white'};\n    font-weight: ${isSelected && 'bold'};\n  `;\n\nexport const content = css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    padding: 5px;\n  `","/** @jsx jsx */\nimport React from 'react';\nimport { jsx } from '@emotion/core';\nimport * as s from './Cell.styles';\n\ntype Props = {\n  isSelected: boolean;\n  cellIdx: number;\n  children: React.ReactNode;\n}\n\nexport function Cell({ children, ...props }: Props) {\n  return (\n    <td css={s.root(props)}  data-testid={props.isSelected && 'selected'}>\n      <div css={s.content}>{children}</div>\n    </td>\n  );\n}\n\nexport default Cell;\n","import css from '@emotion/css/macro';\n\nexport const root = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  height: 100vh;\n`;\n\nexport const globals = css`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n    box-sizing: border-box;\n  }\n`;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, Global } from '@emotion/core';\n\nimport * as s from './Root.styles';\n\ntype Props = {\n  children: React.ReactNode;\n}\n\nfunction Root({ children }: Props) {\n  return (\n    <div css={s.root}>\n      <Global styles={s.globals} />\n      {children}\n    </div>\n  );\n}\n\nexport default Root;\n","/** @jsx jsx */\n// eslint-disable-next-line\nimport { jsx } from '@emotion/core';\nimport styled from '@emotion/styled/macro';\n\nconst Table = styled.table`\n  width: calc(100vh - 100px);\n  max-width: 640px;\n  border-collapse: collapse;\n`;\n\nexport default Table;\n","import React from 'react';\n\nimport Button from './components/Button';\nimport Cell from './components/Cell';\nimport Root from './components/Root';\nimport Table from './components/Table';\n\nimport useRandomiser from './hooks/useRandomiser';\n\nimport cells from './data/cells.json';\n\nfunction App() {\n  const { selectedCell, isSpinning, spin } = useRandomiser(cells);\n\n  return (\n    <Root>\n      <Table>\n        <tbody>\n          {cells.map((row, rowIdx) => (\n            <tr key={rowIdx}>\n              {row.map((text: string, colIdx, cols) => {\n                const cellIdx = rowIdx * cols.length + colIdx;\n                return (\n                  <Cell key={cellIdx} isSelected={selectedCell === cellIdx} cellIdx={cellIdx}>\n                    {text}\n                  </Cell>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <Button onClick={spin} disabled={isSpinning}>\n        SPIN\n      </Button>\n    </Root>\n  );\n}\n\nexport default App;\n","import { useCallback, useState, useRef } from 'react';\n\nexport default function useRandomiser(cells: Array<Array<string>>) {\n  const [selectedCell, setSelected] = useState<number>(-1);\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n\n  const interval = useRef<number>();\n  const timer = useRef<number>();\n\n  const selectRandomCell = useCallback(\n    () => {\n      const cellCount = cells.reduce((count, row) => count + row.length, 0);\n\n      setSelected(selected => {\n        let newSelected = selected;\n        while (newSelected === selected) {\n          newSelected = Math.floor(cellCount * Math.random());\n        }\n        return newSelected;\n      });\n    },\n    [cells]\n  );\n\n  const stopSpinning = useCallback(\n    () => {\n      setIsSpinning(false);\n\n      interval.current && clearInterval(interval.current);\n      interval.current = undefined;\n      timer.current = undefined;\n    },\n    [interval, timer]\n  );\n\n  const spin = useCallback(\n    () => {\n      if (isSpinning) return;\n      setIsSpinning(true);\n\n      timer.current = window.setTimeout(stopSpinning, 2700);\n      interval.current = window.setInterval(selectRandomCell, 350);\n    },\n    [isSpinning, interval, timer, selectRandomCell, stopSpinning]\n  );\n\n  return { selectedCell, isSpinning, spin };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}